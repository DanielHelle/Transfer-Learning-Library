Namespace(root='data/digits', data='Digits', source=['MNIST'], target=['USPS'], train_resizing='res.', val_resizing='res.', resize_size=32, scale=[0.08, 1.0], ratio=[0.75, 1.3333333333333333], no_hflip=False, norm_mean=[0.485], norm_std=[0.229], arch='convnet', bottleneck_dim=256, no_pool=False, scratch=False, trade_off=1.0, batch_size=1, lr=0.01, lr_gamma=0.001, lr_decay=0.75, momentum=0.9, weight_decay=0.001, workers=2, epochs=20, iters_per_epoch=1000, print_freq=100, seed=None, per_class_eval=False, log='logs/dann/Digits_M2U', phase='train', download_dataset_only='False', dataset_condensation='True', condensed_data_path='/home/daniel/exjobb/DatasetCondensation/result/res_DC_pre_processed_mnist_ConvNet_1ipc.pt', no_aug='False', channel=3, convnet_weights_data_path='/home/daniel/exjobb/DatasetCondensation/result/state_dict_DC_pre_processed_mnist_ConvNet_1ipc.pt')
E
I
train_transform:  Compose(
    ResizeImage(size=(32, 32))
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=[0.485], std=[0.229])
)
val_transform:  Compose(
    ResizeImage(size=(32, 32))
    ToTensor()
    Normalize(mean=[0.485], std=[0.229])
)
=> using model 'convnet'
convnet
lr: 0.001
Epoch: [0][   0/1000]	Time  0.08 ( 0.08)	Data  0.01 ( 0.01)	Loss   3.21 (  3.21)	Cls Acc 0.0 (0.0)	Domain Acc 100.0 (100.0)
Epoch: [0][ 100/1000]	Time  0.05 ( 0.01)	Data  0.05 ( 0.01)	Loss   1.96 (  3.30)	Cls Acc 0.0 (4.0)	Domain Acc 100.0 (99.0)
Epoch: [0][ 200/1000]	Time  0.05 ( 0.01)	Data  0.04 ( 0.01)	Loss   1.95 (  3.02)	Cls Acc 0.0 (8.0)	Domain Acc 100.0 (98.5)
Epoch: [0][ 300/1000]	Time  0.05 ( 0.01)	Data  0.04 ( 0.01)	Loss   2.42 (  2.87)	Cls Acc 0.0 (8.6)	Domain Acc 100.0 (99.0)
Epoch: [0][ 400/1000]	Time  0.05 ( 0.01)	Data  0.04 ( 0.01)	Loss   1.52 (  2.68)	Cls Acc 0.0 (10.5)	Domain Acc 100.0 (99.3)
Epoch: [0][ 500/1000]	Time  0.05 ( 0.01)	Data  0.04 ( 0.01)	Loss   1.35 (  2.53)	Cls Acc 0.0 (14.0)	Domain Acc 100.0 (99.4)
Epoch: [0][ 600/1000]	Time  0.05 ( 0.01)	Data  0.04 ( 0.01)	Loss   1.83 (  2.40)	Cls Acc 0.0 (16.6)	Domain Acc 100.0 (99.4)
Traceback (most recent call last):
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 315, in <module>
    main(args)
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 152, in main
    train(train_source_iter, train_target_iter, classifier, domain_adv, optimizer,
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 232, in train
    lr_scheduler.step()
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/torch-1.7.1-py3.9-linux-x86_64.egg/torch/optim/lr_scheduler.py", line 139, in step
    class _enable_get_lr_call:
KeyboardInterrupt
