Namespace(root='data/office31', data='Office31', source=['A'], target=['W'], train_resizing='res.', val_resizing='res.', resize_size=32, scale=[0.08, 1.0], ratio=[0.75, 1.3333333333333333], no_hflip=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), arch='convnet', bottleneck_dim=256, no_pool=False, scratch=False, trade_off=1.0, batch_size=1, lr=0.01, lr_gamma=0.001, lr_decay=0.75, momentum=0.9, weight_decay=0.001, workers=2, epochs=20, iters_per_epoch=1000, print_freq=100, seed=None, per_class_eval=False, log='logs/dann/Office31_A2W', phase='train', download_dataset_only='False', dataset_condensation='True', condensed_data_path='/home/daniel/exjobb/DatasetCondensation/result/res_DC_no_aug_office31_ConvNetdefault_1ipc.pt', no_aug='False', channel=3)
train_transform:  Compose(
    ResizeImage(size=(32, 32))
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
val_transform:  Compose(
    ResizeImage(size=(32, 32))
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
=> using model 'convnet'
convnet
FIEMFIEMFIEM
128
PIEMPIEMPIEM
lr: 0.001
LOREMLOREM
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][   0/1000]	Time  0.07 ( 0.07)	Data  0.00 ( 0.00)	Loss   4.35 (  4.35)	Cls Acc 0.0 (0.0)	Domain Acc 50.0 (50.0)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 100/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   4.09 (  5.37)	Cls Acc 0.0 (1.0)	Domain Acc 100.0 (70.8)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 200/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   5.59 (  5.45)	Cls Acc 0.0 (1.0)	Domain Acc 100.0 (71.6)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 300/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   3.06 (  5.24)	Cls Acc 0.0 (2.0)	Domain Acc 100.0 (80.6)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 400/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   5.89 (  5.00)	Cls Acc 100.0 (2.2)	Domain Acc 0.0 (83.0)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 500/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   4.95 (  5.01)	Cls Acc 0.0 (2.2)	Domain Acc 100.0 (85.0)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 600/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   6.74 (  5.12)	Cls Acc 0.0 (2.0)	Domain Acc 100.0 (86.9)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Traceback (most recent call last):
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 319, in <module>
    main(args)
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 157, in main
    train(train_source_iter, train_target_iter, classifier, domain_adv, optimizer,
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 235, in train
    loss.backward()
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/torch-1.7.1-py3.9-linux-x86_64.egg/torch/tensor.py", line 221, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/torch-1.7.1-py3.9-linux-x86_64.egg/torch/autograd/__init__.py", line 130, in backward
    Variable._execution_engine.run_backward(
KeyboardInterrupt
