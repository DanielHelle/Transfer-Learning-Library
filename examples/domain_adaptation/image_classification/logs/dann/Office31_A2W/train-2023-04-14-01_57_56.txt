Namespace(root='data/office31', data='Office31', source=['A'], target=['W'], train_resizing='res.', val_resizing='res.', resize_size=32, scale=[0.08, 1.0], ratio=[0.75, 1.3333333333333333], no_hflip=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), arch='convnet', bottleneck_dim=256, no_pool=False, scratch=False, trade_off=1.0, batch_size=1, lr=0.01, lr_gamma=0.001, lr_decay=0.75, momentum=0.9, weight_decay=0.001, workers=2, epochs=20, iters_per_epoch=1000, print_freq=100, seed=None, per_class_eval=False, log='logs/dann/Office31_A2W', phase='train', download_dataset_only='False', dataset_condensation='True', condensed_data_path='/home/daniel/exjobb/DatasetCondensation/result/res_DC_no_aug_office31_ConvNetdefault_1ipc.pt', no_aug='False', channel=3)
train_transform:  Compose(
    ResizeImage(size=(32, 32))
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
val_transform:  Compose(
    ResizeImage(size=(32, 32))
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
=> using model 'convnet'
convnet
lr: 0.001
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][   0/1000]	Time  0.05 ( 0.05)	Data  0.00 ( 0.00)	Loss   4.07 (  4.07)	Cls Acc 0.0 (0.0)	Domain Acc 50.0 (50.0)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 100/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   4.43 (  4.83)	Cls Acc 0.0 (1.0)	Domain Acc 100.0 (82.2)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 200/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   1.37 (  4.36)	Cls Acc 100.0 (2.5)	Domain Acc 100.0 (88.1)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 300/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss  10.90 (  4.26)	Cls Acc 0.0 (3.0)	Domain Acc 0.0 (87.4)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 400/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   5.17 (  6.97)	Cls Acc 0.0 (3.0)	Domain Acc 100.0 (81.2)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Epoch: [0][ 500/1000]	Time  0.01 ( 0.01)	Data  0.00 ( 0.00)	Loss   8.04 (  6.78)	Cls Acc 0.0 (2.6)	Domain Acc 0.0 (79.6)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
torch.Size([2, 3, 32, 32])
ImageClassifier(
  (backbone): ConvNet(
    (features): Sequential(
      (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): GroupNorm(128, 128, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GroupNorm(128, 128, eps=1e-05, affine=True)
      (6): ReLU(inplace=True)
      (7): AvgPool2d(kernel_size=2, stride=2, padding=0)
      (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GroupNorm(128, 128, eps=1e-05, affine=True)
      (10): ReLU(inplace=True)
      (11): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (classifier): Linear(in_features=128, out_features=31, bias=True)
  )
  (pool_layer): Sequential(
    (0): AdaptiveAvgPool2d(output_size=(1, 1))
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (bottleneck): Sequential(
    (0): Linear(in_features=128, out_features=256, bias=True)
    (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (head): Linear(in_features=256, out_features=31, bias=True)
)
Traceback (most recent call last):
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 319, in <module>
    main(args)
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 157, in main
    train(train_source_iter, train_target_iter, classifier, domain_adv, optimizer,
  File "/home/daniel/exjobb/Transfer-Learning-Library/examples/domain_adaptation/image_classification/dann.py", line 205, in train
    x_t, = next(train_target_iter)[:1]
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/tllib-0.4-py3.9.egg/tllib/utils/data.py", line 50, in __next__
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/torch-1.7.1-py3.9-linux-x86_64.egg/torch/utils/data/dataloader.py", line 435, in __next__
    data = self._next_data()
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/torch-1.7.1-py3.9-linux-x86_64.egg/torch/utils/data/dataloader.py", line 1068, in _next_data
    idx, data = self._get_data()
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/torch-1.7.1-py3.9-linux-x86_64.egg/torch/utils/data/dataloader.py", line 1034, in _get_data
    success, data = self._try_get_data()
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/site-packages/torch-1.7.1-py3.9-linux-x86_64.egg/torch/utils/data/dataloader.py", line 872, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/multiprocessing/queues.py", line 113, in get
    if not self._poll(timeout):
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/multiprocessing/connection.py", line 257, in poll
    return self._poll(timeout)
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/multiprocessing/connection.py", line 424, in _poll
    r = wait([self], timeout)
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/multiprocessing/connection.py", line 931, in wait
    ready = selector.select(timeout)
  File "/home/daniel/miniconda3/envs/transfer/lib/python3.9/selectors.py", line 421, in select
    if event & ~self._EVENT_READ:
KeyboardInterrupt
